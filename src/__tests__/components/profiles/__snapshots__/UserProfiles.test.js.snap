// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<UserProfiles /> matches snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <UserProfiles
    authors={
      Array [
        Object {
          "email": "username@host.com",
          "profile": Object {
            "bio": "bio",
            "fun_fact": "fun_fact",
            "photo": "photo_url",
          },
          "username": "Username",
        },
      ]
    }
    followersFor=""
    follows={
      Array [
        "one",
        "two",
      ]
    }
    followsFor=""
    getFollowersForCurrentUser={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    getFollowsForCurrentUser={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    getUserProfiles={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    username="LoggedInUser"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <ProfilesHeading
          displayFilter={true}
          handleChange={[Function]}
          heading="User Profiles"
        />,
        Array [
          <Connect(SingleProfile)
            about="bio"
            funFact="fun_fact"
            image="photo_url"
            isFollowing={false}
            name="Username"
          />,
        ],
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "displayFilter": true,
          "handleChange": [Function],
          "heading": "User Profiles",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "username@host.com",
        "nodeType": "class",
        "props": Object {
          "about": "bio",
          "funFact": "fun_fact",
          "image": "photo_url",
          "isFollowing": false,
          "name": "Username",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <ProfilesHeading
            displayFilter={true}
            handleChange={[Function]}
            heading="User Profiles"
          />,
          Array [
            <Connect(SingleProfile)
              about="bio"
              funFact="fun_fact"
              image="photo_url"
              isFollowing={false}
              name="Username"
            />,
          ],
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "displayFilter": true,
            "handleChange": [Function],
            "heading": "User Profiles",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "username@host.com",
          "nodeType": "class",
          "props": Object {
            "about": "bio",
            "funFact": "fun_fact",
            "image": "photo_url",
            "isFollowing": false,
            "name": "Username",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
